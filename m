Return-Path: <linux-block-owner@vger.kernel.org>
X-Original-To: lists+linux-block@lfdr.de
Delivered-To: lists+linux-block@lfdr.de
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.lfdr.de (Postfix) with ESMTP id BABCD62D5E
	for <lists+linux-block@lfdr.de>; Tue,  9 Jul 2019 03:26:00 +0200 (CEST)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1725925AbfGIBZv (ORCPT <rfc822;lists+linux-block@lfdr.de>);
        Mon, 8 Jul 2019 21:25:51 -0400
Received: from smtpproxy19.qq.com ([184.105.206.84]:35947 "EHLO
        smtpproxy19.qq.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725886AbfGIBZv (ORCPT
        <rfc822;linux-block@vger.kernel.org>); Mon, 8 Jul 2019 21:25:51 -0400
X-QQ-mid: bizesmtp22t1562635532tc7jf95e
Received: from Macbook.pro (unknown [218.76.23.26])
        by esmtp6.qq.com (ESMTP) with 
        id ; Tue, 09 Jul 2019 09:25:32 +0800 (CST)
X-QQ-SSF: 01400000000000Q0WO70000A0000000
X-QQ-FEAT: WM/j9RKF0KpKDiTvQgoNzVXEVF8H0o8X2Jux/ZxyvZlj/HMpIowGH4UeZqYTt
        77HSj7O18slKmo660e578W6XwzVDFvZ428LxVr6plvWR+qMPZi+u8yzHfXsh4G4h18ZRttH
        PyoQKr9866eeMYNosR3DjoL+lqyyWRbIPc97e9x0wSGV5bsKEAACt//DL44DBpPSAnJ0OH8
        N90nSPGz2RLCVoDUGsVAdFtT4yuz4+K5Cgqsnn8jKnHAWY3wUriq99K+Imsh8Mfd+xqSC35
        G8/5QDqWeVlFeppLNWGxm7OFiScBPpM1ORYRZrobxEgjKcMADoG+jS//l9x2gOcSaOYS5er
        hkHug95if69EBkRZUsmo/r8PpJAUA==
X-QQ-GoodBg: 2
From:   Jackie Liu <liuyun01@kylinos.cn>
To:     axboe@kernel.dk
Cc:     linux-block@vger.kernel.org, Jackie Liu <liuyun01@kylinos.cn>
Subject: [PATCH] Add regression test cases for kthread stuck
Date:   Tue,  9 Jul 2019 09:25:27 +0800
Message-Id: <20190709012527.1816-1-liuyun01@kylinos.cn>
X-Mailer: git-send-email 2.22.0
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-QQ-SENDSIZE: 520
Feedback-ID: bizesmtp:kylinos.cn:qybgforeign:qybgforeign2
X-QQ-Bgrelay: 1
Sender: linux-block-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-block.vger.kernel.org>
X-Mailing-List: linux-block@vger.kernel.org

Signed-off-by: Jackie Liu <liuyun01@kylinos.cn>
---
 test/Makefile            |   6 +-
 test/kthread_stop-test.c | 172 +++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 176 insertions(+), 2 deletions(-)
 create mode 100644 test/kthread_stop-test.c

diff --git a/test/Makefile b/test/Makefile
index 52b4c9e..53c964d 100644
--- a/test/Makefile
+++ b/test/Makefile
@@ -4,14 +4,14 @@ override CFLAGS += -Wall -D_GNU_SOURCE -L../src/
 all_targets += poll poll-cancel ring-leak fsync io_uring_setup io_uring_register \
 	       io_uring_enter nop sq-full cq-full 35fa71a030ca-test \
 		917257daa0fe-test b19062a56726-test eeed8b54e0df-test link \
-		send_recvmsg
+		send_recvmsg kthread_stop-test
 
 all: $(all_targets)
 
 test_srcs := poll.c poll-cancel.c ring-leak.c fsync.c io_uring_setup.c \
 	io_uring_register.c io_uring_enter.c nop.c sq-full.c cq-full.c \
 	35fa71a030ca-test.c 917257daa0fe-test.c b19062a56726-test.c \
-	eeed8b54e0df-test.c link.c send_recvmsg.c
+	eeed8b54e0df-test.c link.c send_recvmsg.c kthread_stop-test.c
 
 test_objs := $(patsubst %.c,%.ol,$(test_srcs))
 
@@ -47,6 +47,8 @@ link: link.c
 	$(CC) $(CFLAGS) -o $@ link.c -luring
 send_recvmsg: send_recvmsg.c
 	$(CC) $(CFLAGS) -o $@ send_recvmsg.c -luring
+kthread_stop-test: kthread_stop-test.c
+	$(CC) $(CFLAGS) -o $@ kthread_stop-test.c -luring
 
 clean:
 	rm -f $(all_targets) $(test_objs)
diff --git a/test/kthread_stop-test.c b/test/kthread_stop-test.c
new file mode 100644
index 0000000..e1e0706
--- /dev/null
+++ b/test/kthread_stop-test.c
@@ -0,0 +1,172 @@
+// autogenerated by syzkaller (https://github.com/google/syzkaller)
+
+#include <dirent.h>
+#include <endian.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <signal.h>
+#include <stdarg.h>
+#include <stdbool.h>
+#include <stdint.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/prctl.h>
+#include <sys/stat.h>
+#include <sys/syscall.h>
+#include <sys/types.h>
+#include <sys/wait.h>
+#include <time.h>
+#include <unistd.h>
+
+static void sleep_ms(uint64_t ms)
+{
+	usleep(ms * 1000);
+}
+
+static uint64_t current_time_ms(void)
+{
+	struct timespec ts;
+	if (clock_gettime(CLOCK_MONOTONIC, &ts))
+		exit(1);
+	return (uint64_t)ts.tv_sec * 1000 + (uint64_t)ts.tv_nsec / 1000000;
+}
+
+static bool write_file(const char* file, const char* what, ...)
+{
+	char buf[1024];
+	va_list args;
+	va_start(args, what);
+	vsnprintf(buf, sizeof(buf), what, args);
+	va_end(args);
+	buf[sizeof(buf) - 1] = 0;
+	int len = strlen(buf);
+	int fd = open(file, O_WRONLY | O_CLOEXEC);
+	if (fd == -1)
+		return false;
+	if (write(fd, buf, len) != len) {
+		int err = errno;
+		close(fd);
+		errno = err;
+		return false;
+	}
+	close(fd);
+	return true;
+}
+
+static void kill_and_wait(int pid, int* status)
+{
+	kill(-pid, SIGKILL);
+	kill(pid, SIGKILL);
+	int i;
+	for (i = 0; i < 100; i++) {
+		if (waitpid(-1, status, WNOHANG | __WALL) == pid)
+			return;
+		usleep(1000);
+	}
+	DIR* dir = opendir("/sys/fs/fuse/connections");
+	if (dir) {
+		for (;;) {
+			struct dirent* ent = readdir(dir);
+			if (!ent)
+				break;
+			if (strcmp(ent->d_name, ".") == 0 || strcmp(ent->d_name, "..") == 0)
+				continue;
+			char abort[300];
+			snprintf(abort, sizeof(abort), "/sys/fs/fuse/connections/%s/abort",
+					ent->d_name);
+			int fd = open(abort, O_WRONLY);
+			if (fd == -1) {
+				continue;
+			}
+			if (write(fd, abort, 1) < 0) {
+			}
+			close(fd);
+		}
+		closedir(dir);
+	} else {
+	}
+	while (waitpid(-1, status, __WALL) != pid) {
+	}
+}
+
+static void setup_test()
+{
+	prctl(PR_SET_PDEATHSIG, SIGKILL, 0, 0, 0);
+	setpgrp();
+	write_file("/proc/self/oom_score_adj", "1000");
+}
+
+static void execute_one(void);
+
+#define WAIT_FLAGS __WALL
+
+static void loop(void)
+{
+	int iter;
+	for (iter = 0;; iter++) {
+		int pid = fork();
+		if (pid < 0)
+			exit(1);
+		if (pid == 0) {
+			setup_test();
+			execute_one();
+			exit(0);
+		}
+		int status = 0;
+		uint64_t start = current_time_ms();
+		for (;;) {
+			if (waitpid(-1, &status, WNOHANG | WAIT_FLAGS) == pid)
+				break;
+			sleep_ms(1);
+			if (current_time_ms() - start < 5 * 1000)
+				continue;
+			kill_and_wait(pid, &status);
+			break;
+		}
+	}
+}
+
+#ifndef __NR_io_uring_setup
+#define __NR_io_uring_setup 425
+#endif
+
+void execute_one(void)
+{
+	*(uint32_t*)0x20000080 = 0;
+	*(uint32_t*)0x20000084 = 0;
+	*(uint32_t*)0x20000088 = 3;
+	*(uint32_t*)0x2000008c = 3;
+	*(uint32_t*)0x20000090 = 0x175;
+	*(uint32_t*)0x20000094 = 0;
+	*(uint32_t*)0x20000098 = 0;
+	*(uint32_t*)0x2000009c = 0;
+	*(uint32_t*)0x200000a0 = 0;
+	*(uint32_t*)0x200000a4 = 0;
+	*(uint32_t*)0x200000a8 = 0;
+	*(uint32_t*)0x200000ac = 0;
+	*(uint32_t*)0x200000b0 = 0;
+	*(uint32_t*)0x200000b4 = 0;
+	*(uint32_t*)0x200000b8 = 0;
+	*(uint32_t*)0x200000bc = 0;
+	*(uint32_t*)0x200000c0 = 0;
+	*(uint32_t*)0x200000c4 = 0;
+	*(uint64_t*)0x200000c8 = 0;
+	*(uint32_t*)0x200000d0 = 0;
+	*(uint32_t*)0x200000d4 = 0;
+	*(uint32_t*)0x200000d8 = 0;
+	*(uint32_t*)0x200000dc = 0;
+	*(uint32_t*)0x200000e0 = 0;
+	*(uint32_t*)0x200000e4 = 0;
+	*(uint32_t*)0x200000e8 = 0;
+	*(uint32_t*)0x200000ec = 0;
+	*(uint64_t*)0x200000f0 = 0;
+	syscall(__NR_io_uring_setup, 0x983, 0x20000080);
+}
+
+int main(void)
+{
+	syscall(__NR_mmap, 0x20000000, 0x1000000, 3, 0x32, -1, 0);
+	loop();
+	return 0;
+}
-- 
2.7.4



